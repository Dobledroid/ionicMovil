name: PWA CI/CD Workflow

# 1. Configuración de desencadenadores
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # 2. Configuración del entorno y preparación del sistema operativo
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

  # 3. Manejo de múltiples ramas
  tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test
        env:
          CI: true

      # - name: Run E2E tests (Only on main and release branches)
      #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
      #   run: npm run test:e2e
      #   env:
      #     CI: true

  # 4. Etapa de Compilación
  build:
    runs-on: ubuntu-latest
    needs: [setup, tests]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: Upload build artifact
        if: github.ref != 'refs/heads/feature/*' && github.ref != 'refs/heads/development'
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./build

  # 5. Despliegue en ramas específicas
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: Deploy to Production
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          # Añade aquí el script o comando necesario para desplegar en producción
          echo "Despliegue completado."

  # 6. Generación de reportes de cobertura
  coverage:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./coverage
